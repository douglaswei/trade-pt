// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user-center.proto

package usercenter

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserCenter service

func NewUserCenterEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserCenter service

type UserCenterService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (UserCenter_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (UserCenter_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (UserCenter_BidiStreamService, error)
}

type userCenterService struct {
	c    client.Client
	name string
}

func NewUserCenterService(name string, c client.Client) UserCenterService {
	return &userCenterService{
		c:    c,
		name: name,
	}
}

func (c *userCenterService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "UserCenter.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterService) ClientStream(ctx context.Context, opts ...client.CallOption) (UserCenter_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "UserCenter.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &userCenterServiceClientStream{stream}, nil
}

type UserCenter_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ClientStreamRequest) error
}

type userCenterServiceClientStream struct {
	stream client.Stream
}

func (x *userCenterServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *userCenterServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userCenterServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userCenterServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userCenterServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *userCenterService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (UserCenter_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "UserCenter.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &userCenterServiceServerStream{stream}, nil
}

type UserCenter_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type userCenterServiceServerStream struct {
	stream client.Stream
}

func (x *userCenterServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *userCenterServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userCenterServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userCenterServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userCenterServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userCenterService) BidiStream(ctx context.Context, opts ...client.CallOption) (UserCenter_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "UserCenter.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &userCenterServiceBidiStream{stream}, nil
}

type UserCenter_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type userCenterServiceBidiStream struct {
	stream client.Stream
}

func (x *userCenterServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *userCenterServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userCenterServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userCenterServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userCenterServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *userCenterServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserCenter service

type UserCenterHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, UserCenter_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, UserCenter_ServerStreamStream) error
	BidiStream(context.Context, UserCenter_BidiStreamStream) error
}

func RegisterUserCenterHandler(s server.Server, hdlr UserCenterHandler, opts ...server.HandlerOption) error {
	type userCenter interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type UserCenter struct {
		userCenter
	}
	h := &userCenterHandler{hdlr}
	return s.Handle(s.NewHandler(&UserCenter{h}, opts...))
}

type userCenterHandler struct {
	UserCenterHandler
}

func (h *userCenterHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.UserCenterHandler.Call(ctx, in, out)
}

func (h *userCenterHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.UserCenterHandler.ClientStream(ctx, &userCenterClientStreamStream{stream})
}

type UserCenter_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type userCenterClientStreamStream struct {
	stream server.Stream
}

func (x *userCenterClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *userCenterClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userCenterClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userCenterClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userCenterClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *userCenterHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.UserCenterHandler.ServerStream(ctx, m, &userCenterServerStreamStream{stream})
}

type UserCenter_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type userCenterServerStreamStream struct {
	stream server.Stream
}

func (x *userCenterServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *userCenterServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userCenterServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userCenterServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userCenterServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *userCenterHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.UserCenterHandler.BidiStream(ctx, &userCenterBidiStreamStream{stream})
}

type UserCenter_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type userCenterBidiStreamStream struct {
	stream server.Stream
}

func (x *userCenterBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *userCenterBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userCenterBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userCenterBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userCenterBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *userCenterBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
